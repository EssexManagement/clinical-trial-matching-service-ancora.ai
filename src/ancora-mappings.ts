/**
 * Contains mappings between various known codes and their Ancora query
 * boolean fields.
 */

import { AncoraQueryFlag } from './ancora-query';

const LOINC_SYSTEM = 'http://loinc.org';
const RX_NORM_SYSTEM = 'http://www.nlm.nih.gov/research/umls/rxnorm';
const SNOMED_CT_SYSTEM = 'http://snomed.info/sct';

// Because the systems are all constant string values, typeof works to "extract"
// the string value to a TypeScript type. This type is mainly used for "typo
// checking" in the mappings coded below.
type FhirSystem = typeof LOINC_SYSTEM | typeof RX_NORM_SYSTEM | typeof SNOMED_CT_SYSTEM;
type CodeMappings = Map<FhirSystem, string[]>;

const ancoraToCodes = new Map<AncoraQueryFlag, CodeMappings>([
  [
    'alk',
    new Map<FhirSystem, string[]>([
      [
        LOINC_SYSTEM,
        ['78205-2', '78210-2', '100019-9', '7451-8', '78233-4']
      ]
    ])
  ],
  [
    'ros1',
    new Map<FhirSystem, string[]>([
      [ LOINC_SYSTEM, ['81747-8'] ]
    ])
  ],
  [
    'idh2',
    new Map<FhirSystem, string[]>([
      [ LOINC_SYSTEM, ['100023-1', '95772-0'] ]
    ])
  ],
  [
    'flt3_itd',
    new Map<FhirSystem, string[]>([
      [ LOINC_SYSTEM, ['98489-8', '79210-1', '85100-6', '92844-0'] ]
    ])
  ],
  [
    'flt3_tkd',
    new Map<FhirSystem, string[]>([
      [ LOINC_SYSTEM, ['92843-2', '72520-0', '98490-6'] ]
    ])
  ],
  [
    'hras',
    new Map<FhirSystem, string[]>([
      [ LOINC_SYSTEM, ['53871-0', '21699-4', '21698-6', '53623-5'] ]
    ])
  ],
  [
    'orchiectomy',
    new Map<FhirSystem, string[]>([
      [RX_NORM_SYSTEM,
        [
          '767348006', '767347001', '767344008', '767343002', '767342007',
          '767341000', '767339001', '767337004', '767336008', '767335007',
          '396692006', '236334001', '176418008', '176417003', '176416007',
          '116171002', '112910006', '87375004',
        ]
      ]
    ])
  ],
  [
    'allogeneic_hematopoietic_stem_cell_transplantation',
    new Map<FhirSystem, string[]>([
      [ RX_NORM_SYSTEM, ['425843001'] ]
    ])
  ],
  [
    'autologous_hematopoietic_stem_cell_transplantation',
    new Map<FhirSystem, string[]>([
      [ RX_NORM_SYSTEM, ['425983008', '709115004'] ]
    ])
  ],
  [
    'braf_therapy',
    new Map<FhirSystem, string[]>([
      [
        RX_NORM_SYSTEM,
        [
          '2049112', '2049106', '2049117', '2049121', '2049113', '2049120',
          '2049114', '2049119', '2049111', '2049107', '2049118', '2049110',
          '2049108', '2049109', '2049115', '2049116', '1425223', '1424911',
          '1425222', '1425228', '1425230', '1425224', '1425229', '1425225',
          '1424918', '1424916', '1424912', '1424917', '1424915', '1424913',
          '1424914', '1425226', '1425227', '1147224', '1147220', '1147228',
          '1147225', '1147227', '1147223', '1147221', '1147222', '1160508',
          '1160509', '1187234', '1187235',
        ]
      ]
    ])
  ],
  [
    'mek_therapy',
    new Map<FhirSystem, string[]>([
      [
        RX_NORM_SYSTEM,
        [
          '1425105', '1425099', '1425098', '1425118', '1425110', '1425106',
          '1425117', '1425107', '1425116', '1425104', '1425100', '1425115',
          '1425103', '1425101', '1425102', '1425108', '1425109', '2049128',
          '2049122', '2049133', '2049129', '2049130', '2049127', '2049123',
          '2049126', '2049124', '2049125', '2049131', '2049132', '1722371',
          '1722365', '1722380', '1722376', '1722372', '1722373', '1722370',
          '1722366', '1722369', '1722367', '1722368', '1722374', '1722375',
        ]
      ]
    ])
  ],
  [
    'lhrh_agonists',
    new Map<FhirSystem, string[]>([
      [
        RX_NORM_SYSTEM,
        [
          '203852', '352619', '2371769', '1488617', '1488619', '1488616',
          '1488618', '42375', '203217', '1946522', '1946520', '2371773',
          '1115259', '1115468', '1115456', '1115459', '1115449', '825333',
          '825334', '825335', '825325', '1115464', '1115473', '1115258',
          '1115448', '1115455', '1115458', '1115463', '1115470', '583426',
          '583431', '583436', '2371770', '727602', '825324', '2371771',
          '545848', '1946521', '545835', '752894', '1115457', '1115447',
          '1115257', '1115467', '1115472', '1116124', '1115454', '1115462',
          '1946519', '752899', '752889', '583425', '752884', '1115446',
          '1115461', '545830', '545834', '545843', '545847', '583424', '583429',
          '583434', '372576', '378232', '727599', '1163443', '2371772',
          '1173874', '1181489', '58328', '50610', '203146', '105641', '211544',
          '564142', '571914', '370482', '314008', '310592', '353411', '358339',
          '379243', '1156883', '1188163', '905054', '38782', '338529', '905060',
          '905064', '905057', '905059', '1863373', '1863378', '1863382',
          '1863374', '905053', '199821', '905062', '1863370', '1863376',
          '1863380', '1863371', '1159353', '1179671', '2595041', '2595045',
          '2595049', '2595046', '2595048', '2595047',
        ]
      ]
    ]),
  ],
  [
    'lhrh_antagonists',
    new Map<FhirSystem, string[]>([
      [
        RX_NORM_SYSTEM,
        [
          '858122', '475230', '835863', '858125', '858127', '1812347',
          '1812352', '1812348', '828749', '828751', '1812344', '1812350',
          '1812345', '1157202', '1169000', '2556803', '2472784', '2472778',
          '2556806', '2556800', '2472789', '2556798', '2472785', '2556805',
          '2472786', '2472783', '2556799', '2556796', '2472779', '2556797',
          '2472782', '2556801', '2556802', '2472780', '2472781', '2556795',
          '2556804', '2472787', '2472788',
        ]
      ]
    ])
  ],
  [
    'ad_therapy',
    new Map<FhirSystem, string[]>([
      [
        RX_NORM_SYSTEM,
        [
          '203852', '352619', '2371769', '1488617', '1488619', '1488616',
          '1488618', '42375', '203217', '1946522', '1946520', '2371773',
          '1115259', '1115468', '1115456', '1115459', '1115449', '825333',
          '825334', '825335', '825325', '1115464', '1115473', '1115258',
          '1115448', '1115455', '1115458', '1115463', '1115470', '583426',
          '583431', '583436', '2371770', '727602', '825324', '2371771',
          '545848', '1946521', '545835', '752894', '1115457', '1115447',
          '1115257', '1115467', '1115472', '1116124', '1115454', '1115462',
          '1946519', '752899', '752889', '583425', '752884', '1115446',
          '1115461', '545830', '545834', '545843', '545847', '583424', '583429',
          '583434', '372576', '378232', '727599', '1163443', '2371772',
          '1173874', '1181489', '58328', '50610', '203146', '105641', '211544',
          '564142', '571914', '370482', '314008', '310592', '353411', '358339',
          '379243', '1156883', '1188163', '905054', '38782', '338529', '905060',
          '905064', '905057', '905059', '1863373', '1863378', '1863382',
          '1863374', '905053', '199821', '905062', '1863370', '1863376',
          '1863380', '1863371', '1159353', '1179671', '2595041', '2595045',
          '2595049', '2595046', '2595048', '2595047', '858122', '475230',
          '835863', '858125', '858127', '1812347', '1812352', '1812348',
          '828749', '828751', '1812344', '1812350', '1812345', '1157202',
          '1169000', '2556803', '2472784', '2472778', '2556806', '2556800',
          '2472789', '2556798', '2472785', '2556805', '2472786', '2472783',
          '2556799', '2556796', '2472779', '2556797', '2472782', '2556801',
          '2556802', '2472780', '2472781', '2556795', '2556804', '2472787',
          '2472788', '1100076', '1100072', '1100071', '1918044', '1100079',
          '1100077', '1918043', '1100078', '1100075', '1918042', '1100073',
          '1918041', '1100074', '1163656', '1163657', '1186683', '1186684',
          '202692', '6135', '206978', '608844', '564507', '608843', '402946',
          '106336', '240812', '330469', '335100', '377504', '1160957',
          '1295391', '1184476', '1296820', '4508', '199609', '197726', '315960',
          '332500', '372251', '372252', '1161458', '1161459', '151495', '83008',
          '108828', '564608', '369055', '199123', '349406', '315478', '350633',
          '371070', '1161189', '1161190', '1175807', '1175808', '218741',
          '31805', '284551', '574979', '367745', '311982', '331558', '373082',
          '1158946', '1158947', '1183905', '1183906', '1307304', '1307298',
          '2390650', '1307309', '2390646', '1307305', '2390649', '1307306',
          '2390645', '2390644', '2390648', '1307303', '1307299', '2390647',
          '1307302', '2390643', '1307300', '1307301', '1307307', '1307308',
          '1999582', '1999574', '1999587', '1999583', '1999584', '1999581',
          '1999577', '1999580', '1999578', '1999579', '1999585', '1999586',
          '2180331', '2180325', '2180336', '2180332', '2180333', '2180330',
          '2180326', '2180329', '2180327', '2180328', '2180334', '2180335',
        ]
      ]
    ])
  ],
  [
    'antiandrogens',
    new Map<FhirSystem, string[]>([
      [
        RX_NORM_SYSTEM,
        [
          '4508', '199609', '197726', '315960', '332500', '372251', '372252',
          '1161458', '1161459', '151495', '83008', '108828', '564608', '369055',
          '199123', '349406', '315478', '350633', '371070', '1161189',
          '1161190', '1175807', '1175808', '218741', '31805', '284551',
          '574979', '367745', '311982', '331558', '373082', '1158946',
          '1158947', '1183905', '1183906', '1307304', '1307298', '2390650',
          '1307309', '2390646', '1307305', '2390649', '1307306', '2390645',
          '2390644', '2390648', '1307303', '1307299', '2390647', '1307302',
          '2390643', '1307300', '1307301', '1307307', '1307308', '1999582',
          '1999574', '1999587', '1999583', '1999584', '1999581', '1999577',
          '1999580', '1999578', '1999579', '1999585', '1999586', '2180331',
          '2180325', '2180336', '2180332', '2180333', '2180330', '2180326',
          '2180329', '2180327', '2180328', '2180334', '2180335',
        ]
      ]
    ])
  ],
  [
    'proteasome_inhibitors',
    new Map<FhirSystem, string[]>([
      [
        RX_NORM_SYSTEM,
        [
          '356733', '358258', '402244', '1804996', '1804997', '402243',
          '1804993', '1804994', '1163075', '1187756', '1723758', '1723735',
          '1723734', '1723767', '1723763', '1723772', '1723759', '1723766',
          '1723771', '1723760', '1723757', '1723765', '1723770', '1723753',
          '1723764', '1723769', '1723756', '1723754', '1723755', '1723761',
          '1723762', '1302971', '1302966', '2046644', '1806942', '1806937',
          '1806935', '1806941', '2046643', '1806936', '2046642', '1806934',
          '1806940', '1806932', '1806939', '2046641', '1806933', '1302968',
          '1302974',
        ]
      ]
    ])
  ],
  [
    'immunomodulators',
    new Map<FhirSystem, string[]>([
      [
        RX_NORM_SYSTEM,
        [
          '220239', '10432', '700418', '213360', '404449', '404450', '573254',
          '576406', '576407', '700417', '366451', '360177', '200390', '360176',
          '700416', '316784', '360321', '360322', '700415', '374072', '1164873',
          '1164874', '1184929', '1184930', '337535', '342369', '1429367',
          '1242233', '616114', '643722', '616116', '643714', '616112', '616115',
          '643713', '643721', '1429366', '1242232', '616113', '602910',
          '602912', '1242231', '643712', '643720', '1428947', '602908',
          '602911', '643711', '643719', '1428946', '1242230', '602909',
          '1162569', '1162570', '1182522', '1182529', '1369719', '1369713',
          '1369728', '1369724', '1369736', '1369732', '1369720', '1369727',
          '1369731', '1369735', '1369721', '1369730', '1369718', '1369726',
          '1369734', '1369714', '1369725', '1369729', '1369733', '1369717',
          '1369715', '1369716', '1369722', '1369723',
        ]
      ]
    ])
  ]
]);

// TODO: Don't know how to code the following:
// CancerGeneticVariant component:GeneStudied valueCodeableConcept = HGNC
// HGNC:427	ALK
// CancerGeneticVariant component:GeneStudied valueCodeableConcept = HGNC
// HGNC:10261	ROS1
// etc.

// With the existing mappings, the most common lookup is actually [system, code]
// to an Ancora flag, so build that mapping

const codesToAncora = new Map<string, Map<string, Set<AncoraQueryFlag>>>();

function codeMappingFor(system: FhirSystem): Map<string, Set<AncoraQueryFlag>> {
  let mapping = codesToAncora.get(system);
  if (!mapping) {
    mapping = new Map<string, Set<AncoraQueryFlag>>();
    codesToAncora.set(system, mapping);
  }
  return mapping;
}

for (const [flag, mappings] of ancoraToCodes.entries()) {
  for (const [system, codes] of mappings.entries()) {
    const systemMappings = codeMappingFor(system);
    for (const code of codes) {
      const existing = systemMappings.get(code);
      if (existing) {
        existing.add(flag);
      } else {
        systemMappings.set(code, new Set<AncoraQueryFlag>([flag]))
      }
    }
  }
}

/**
 * Looks up all flags for a given code.
 * @param system the FHIR sysetm URI
 * @param code the code to look up
 * @returns null if the code is unknown, otherwise an array of all matching
 * flags
 */
export function findQueryFlagsForCode(system: string, code: string): AncoraQueryFlag[] | null {
  // See if something exists
  const mapping = codesToAncora.get(system);
  if (mapping) {
    const flag = mapping.get(code);
    return Array.from(flag) ?? null;
  } else {
    return null;
  }
}
